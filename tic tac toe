import math

# Initialize board
board = [' ' for _ in range(9)]

# Display board
def print_board():
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

# Check for winner
def check_winner(player):
    win_combos = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # horizontal
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # vertical
        [0, 4, 8], [2, 4, 6]              # diagonal
    ]
    return any(all(board[i] == player for i in combo) for combo in win_combos)

# Check for draw
def is_draw():
    return ' ' not in board

# Player move
def player_move():
    while True:
        move = input("Enter your move (1-9): ")
        if move.isdigit() and int(move) in range(1, 10):
            move = int(move) - 1
            if board[move] == ' ':
                board[move] = 'X'
                break
            else:
                print("Cell already taken. Try again.")
        else:
            print("Invalid input. Choose 1-9.")

# AI move (minimax)
def ai_move():
    best_score = -math.inf
    best_move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    board[best_move] = 'O'

# Minimax algorithm
def minimax(board_state, depth, is_maximizing):
    if check_winner('O'):
        return 1
    elif check_winner('X'):
        return -1
    elif is_draw():
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board_state[i] == ' ':
                board_state[i] = 'O'
                score = minimax(board_state, depth + 1, False)
                board_state[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board_state[i] == ' ':
                board_state[i] = 'X'
                score = minimax(board_state, depth + 1, True)
                board_state[i] = ' '
                best_score = min(score, best_score)
        return best_score

# Game loop
def play_game():
    print("Welcome to Tic-Tac-Toe! You are X, AI is O.")
    print_board()

    while True:
        player_move()
        print_board()
        if check_winner('X'):
            print("ðŸŽ‰ You win!")
            break
        elif is_draw():
            print("It's a draw!")
            break

        print("AI is thinking...")
        ai_move()
        print_board()
        if check_winner('O'):
            print("ðŸ˜ˆ AI wins!")
            break
        elif is_draw():
            print("It's a draw!")
            break

# Run the game
play_game()
